/* tslint:disable */
/* eslint-disable */
/**
 * URL List API
 * API for managing URL lists         Schema: <a href=\"http://localhost:3001/api-yaml\" target=\"_blank\">http://localhost:3001/api-yaml</a>       
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateUrlDto,
} from '../models/index';
import {
    CreateUrlDtoFromJSON,
    CreateUrlDtoToJSON,
} from '../models/index';

export interface UrlControllerCreateRequest {
    createUrlDto: CreateUrlDto;
}

export interface UrlControllerFindByListIdRequest {
    listId: string;
}

export interface UrlControllerRemoveRequest {
    id: string;
}

export interface UrlControllerUpdateRequest {
    id: string;
    body: object;
}

/**
 * UrlApi - interface
 * 
 * @export
 * @interface UrlApiInterface
 */
export interface UrlApiInterface {
    /**
     * 
     * @param {CreateUrlDto} createUrlDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UrlApiInterface
     */
    urlControllerCreateRaw(requestParameters: UrlControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    urlControllerCreate(requestParameters: UrlControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} listId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UrlApiInterface
     */
    urlControllerFindByListIdRaw(requestParameters: UrlControllerFindByListIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    urlControllerFindByListId(requestParameters: UrlControllerFindByListIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UrlApiInterface
     */
    urlControllerRemoveRaw(requestParameters: UrlControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    urlControllerRemove(requestParameters: UrlControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UrlApiInterface
     */
    urlControllerUpdateRaw(requestParameters: UrlControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    urlControllerUpdate(requestParameters: UrlControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class UrlApi extends runtime.BaseAPI implements UrlApiInterface {

    /**
     */
    async urlControllerCreateRaw(requestParameters: UrlControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createUrlDto'] == null) {
            throw new runtime.RequiredError(
                'createUrlDto',
                'Required parameter "createUrlDto" was null or undefined when calling urlControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/urls`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUrlDtoToJSON(requestParameters['createUrlDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async urlControllerCreate(requestParameters: UrlControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.urlControllerCreateRaw(requestParameters, initOverrides);
    }

    /**
     */
    async urlControllerFindByListIdRaw(requestParameters: UrlControllerFindByListIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['listId'] == null) {
            throw new runtime.RequiredError(
                'listId',
                'Required parameter "listId" was null or undefined when calling urlControllerFindByListId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/urls/list/{listId}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters['listId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async urlControllerFindByListId(requestParameters: UrlControllerFindByListIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.urlControllerFindByListIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async urlControllerRemoveRaw(requestParameters: UrlControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling urlControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/urls/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async urlControllerRemove(requestParameters: UrlControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.urlControllerRemoveRaw(requestParameters, initOverrides);
    }

    /**
     */
    async urlControllerUpdateRaw(requestParameters: UrlControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling urlControllerUpdate().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling urlControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/urls/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async urlControllerUpdate(requestParameters: UrlControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.urlControllerUpdateRaw(requestParameters, initOverrides);
    }

}
